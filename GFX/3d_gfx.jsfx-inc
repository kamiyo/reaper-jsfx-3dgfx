/*
    A collection of functions to help you make 3d graphics in a Reaper Effects Plugin.
    This requires JackUtilities dynamic allocator.
    In general, the functions will check the dimensions of your memory object by accessing addr[-1],
    because JackUtilities dynamic allocator stores memory sizes in addr[-1].

    All code and checks assume the matrices are square and vectors are column.
    Most functions do not mutate inputs, but rather write outputs to a pointer.
    Geometric functions are in homogenous coordinates.
    The pointer can be created by calling ptr = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear).
    For allocator usage, please see:
        https://github.com/jack461/JackUtilities/blob/main/Utilities/mSL_Dyn_Memory.jsfx-inc
        https://github.com/jack461/JackUtilities/blob/main/Note-010-Dynamic-Memory-Allocation/JJ-Test-JSFX-Dyn-1.jsfx

    Error codes (bit set, 0-indexed):
    0   Matrix access out-of-bounds
    1   Matrix x vector input and/or output size mismatch
    2   Matrix transpose input/output size mismatch
    3   Matrix x matrix input and/or output sizes mismatch\
    4   Scalar multiply input/output size mismatch
    5   Vector addition input and/or output sizes mismatch
    6   Vector subtraction input and/or output sizes mismatch
    7   Dot product input sizes mismatch
    8   Normalize input/output size mismatch
    9   Vector/Matrix copy input/output size mismatch
    10  Comparison input/output size mismatch
    11  Rotation matrix output must be at least 3x3
*/


@init

// Deal with errors
function gfxu_err_flag(err_bit)
global(gfxu_err)
(
    gfxu_err = gfxu_err | 1 << err_bit;
);


/*
//
//  This section is utility functions, mostly for internal use.
//
*/

// Converts row and col to single index.
function gfxu_2dx(row, col, size)
(
    row * size + col;
);

// helper function to access 2d matrix.
function gfxu_idx(row, col, mat)
local(dim, result)
(
    dim = sqrt(mat[-1]);
    (row < dim && col < dim && row >= 0 && col >= 0) ? (
        result = mat[row * dim + col];
    ) : (
        gfxu_err_flag(0);
    );
    result;
);

// Helper function to print matrix into a string.
function gfxu_print_mat(s, mat)
instance(#s, #temp)
local(i, j, dim)
(
    (mat[-2] === 'vecs') ? (
        #s = "vec:";
        i = 0;
        dim = mat[-1];
        loop(
            dim,
            #temp = "";
            sprintf(#temp, " %.3f", mat[i]);
            #s += #temp;
            i += 1;
        );
    ) : (
        #s = "mat:";
        j = 0;
        dim = sqrt(mat[-1]);
        gfxu_err = dim;
        while(j < dim) (
            i = 0;
            while(i < dim) (
                #temp = "";
                sprintf(#temp, " %.3f", mat[gfxu_2dx(j, i, dim)]);
                #s += #temp;
                i += 1;
            );
            (i !== dim - 1) ? (
                #s += ", ";
            );
            j += 1;
        );
    );
    strcpy(s, #s);
);

// This multiplies a matrix by a vector, most useful for transformation matrices.
function gfxu_mat_vec_mult(mat, vec, res)
local(i, size)
(
    i = 0;
    (vec[-1] === sqrt(mat[-1]) && vec[-1] === res[-1]) ? (
        size = vec[-1];
        loop(
            size,
            res[i] = mem_multiply_sum(mat + (size * i), vec, size);
            i += 1;
        );
    ) : (
        gfxu_err_flag(1);
    );
);

// Transposes a matrix. Also is inversion if the matrix is an orthonormal matrix (rotation).
function gfxu_transpose_mat(mat, res)
local(dim, i, j)
global(gfxu_err)
(
    (mat[-1] === res[-1]) ? (
        dim = sqrt(mat[-1]);
        j = 0;
        while(j < dim)
        (
            i = 0;
            while(i < dim)
            (
                res[gfxu_2dx(j, i, dim)] = mat[gfxu_2dx(i, j, dim)];
                i += 1;
            );
            j += 1;
        );
    ) : (
        gfxu_err_flag(2);
    );
);

// Multiplies two matrices. We assume square matrices. For matrix x vector, see gfxu_mat_vec_mult()
function gfxu_mat_mult(mat, mat2, res)
global(gfxu_transposed_mat)
local(dim, i, j)
(
    (mat[-1] === mat2[-1] && mat[-1] === res[-1]) ? (
        gfxu_transpose_mat(mat2, gfxu_transposed_mat);
        dim = sqrt(mat[-1]);
        j = 0;
        while(j < dim)
        (
            i = 0;
            while(i < dim)
            (
                res[gfxu_2dx(j, i, dim)] = mem_multiply_sum(
                    mat + (dim * j),
                    gfxu_transposed_mat + (dim * i),
                    dim
                );
                i += 1;
            );
            j += 1;
        );
    ) : (
        gfxu_err_flag(3);
    );
);

// Scales a matrix or vector.
function gfxu_scalar_mat_mult(scalar, mat, res)
local(i)
(
    (mat[-1] === res[-1]) ? (
        i = 0;
        loop(
            mat[-1],
            res[i] = mat[i] * scalar;
            i += 1;
        );
    ) : (
        gfxu_err_flag(4);
    );
);

// Make a 3d vector (w = 0) in 'vec' pointer.
function gfxu_vec(x, y, z, vec)
(
    vec[0] = x;
    vec[1] = y;
    vec[2] = z;
    vec[3] = 0;
);

// Make a 3d point (w = 1) in 'vec' pointer.
function gfxu_point(x, y, z, vec)
(
    vec[0] = x;
    vec[1] = y;
    vec[2] = z;
    vec[3] = 1;
);

// Make an identity matrix in mat. Assume square matrix.
function gfxu_make_i(mat)
local(i, dim)
(
    memset(mat, 0, mat[-1]);
    i = 0;
    dim = sqrt(mat[-1]);
    loop(
        dim,
        mat[i] = 1;
        i += (dim + 1);
    );
);

// Add two vecs, storing result in res.
function gfxu_add_vec(v1, v2, res)
local(i, size)
(
    (v1[-1] === v2[-1] && v1[-1] === res[-1]) ? (
        i = 0;
        size = v1[-1];
        loop(
            size,
            res[i] = v1[i] + v2[i];
            i += 1;
        );
    ) : (
        gfxu_err_flag(5);
    );
);

// Subtract v2 from v1, storing result in res.
function gfxu_sub_vec(v1, v2, res)
local(i, size)
(
    (v1[-1] === v2[-1] && v1[-1] === res[-1]) ? (
        i = 0;
        size = v1[-1];
        loop(
            size,
            res[i] = v1[i] - v2[i];
            i += 1;
        );
    ) : (
        gfxu_err_flag(6);
    );
);

// Dot product of two vectors.
function gfxu_dot(v1, v2)
local(temp)
global(#out0)
(
    (v1[-1] === v2[-1]) ? (
        temp = mem_multiply_sum(v1, v2, v1[-1]);
    ) : (
        gfxu_err_flag(7);
    );
    temp;
);

// Norm (length) of the vector.
function gfxu_norm(v)
(
    sqrt(gfxu_dot(v, v));
);

// Normalize the vector, store in res
function gfxu_normalize(v, res)
local(temp)
global(#out1)
(
    (v[-1] === res[-1]) ? (
        temp = 1 / gfxu_norm(v);
        temp = gfxu_scalar_mat_mult(temp, v, res);
    ) : (
        gfxu_err_flag(8);
    );
    temp;
);

// Going to assume 3d vectors.
function gfxu_cross(v1, v2, res)
(
    res[0] = v1[1] * v2[2] - v1[2] * v2[1];
    res[1] = v1[2] * v2[0] - v1[0] * v2[2];
    res[2] = v1[0] * v2[1] - v1[1] * v2[0];
    res[3] = 0;
);

// Copy vector v into res
function gfxu_dup_vec(v, res)
(
    (v[-1] === res[-1]) ? (
        memcpy(res, v, v[-1]);
    ) : (
        gfxu_err_flag(9);
    );
);

// Tests if vectors/matrices are equal
function gfxu_mat_equals(v1, v2)
local(break, i, size, result)
(
    (v1[-1] === v2[-1]) ? (
        size = v1[-1];
        i = 0;
        break = 0;
        while(!break && i < size) (
            (v1[i] !== v2[i]) ? (
                break = 1;
            );
            i += 1;
        );
        !break;
    ) : (
        gfxu_err_flag(10);
    );
);

// Make a 3d rotation matrix given axis and angle in radians, store in mat.
// Use the global cartesian_[x, y, z]'s address to specify standard axes,
// otherwise provide a vector.
function gfxu_rot_mat_3d(axis, angle, mat)
local(cos_theta, sin_theta)
global(gfxu_cartesian_x, gfxu_cartesian_y, gfxu_cartesian_z, #out1)
(
    (sqrt(mat[-1]) >= 3) ? (
        cos_theta = cos(angle);
        sin_theta = sin(angle);
        gfxu_make_i(mat);
        (axis === gfxu_cartesian_x) ? (
            mat[5] = mat[10] = cos_theta;
            mat[6] = -sin_theta;
            mat[9] = sin_theta;
        ) : ((axis === gfxu_cartesian_y) ? (
                mat[0] = mat[10] = cos_theta;
                mat[2] = sin_theta;
                mat[8] = -sin_theta;
            ) : ((axis === gfxu_cartesian_z) ? (
                    mat[0] = mat[5] = cos_theta;
                    mat[1] = -sin_theta;
                    mat[4] = sin_theta;
                ) : (
                        // General Rotation
                        mat[0] = cos_theta + axis[0] * axis[0] * (1 - cos_theta);
                        mat[1] = axis[0] * axis[1] * (1 - cos_theta) - axis[2] * sin_theta;
                        mat[2] = axis[0] * axis[2] * (1 - cos_theta) + axis[1] * sin_theta;

                        mat[4] = axis[0] * axis[1] * (1 - cos_theta) + axis[2] * sin_theta;
                        mat[5] = cos_theta + axis[1] * axis[1] * (1 - cos_theta);
                        mat[6] = axis[1] * axis[2] * (1 - cos_theta) - axis[0] * sin_theta;

                        mat[8] = axis[2] * axis[0] * (1 - cos_theta) - axis[1] * sin_theta;
                        mat[9] = axis[2] * axis[1] * (1 - cos_theta) + axis[0] * sin_theta;
                        mat[10] = cos_theta + axis[2] * axis[2] * (1 - cos_theta);
                );
            );
        );
    ) : (
        gfxu_err_flag(11);
    );
);

/************************************************
//
//  More of the public facing API.
//
*************************************************/

// Init necessary global variables and memory
function gfxu_init()
global(
    gfxu_mvp, gfxu_model, gfxu_view, gfxu_proj, gfxu_err,
    #dbg_desc, gfxu_static_identity_mat, depth_buffer,
    gfxu_temp_mat, gfxu_temp_mat2, gfxu_transposed_mat, mSL_StM_FlClear,
    gfxu_t1, gfxu_t2, gfxu_t3, gfxu_t4, gfxu_t5, gfxu_t6, gfxu_t7, gfxu_t8,
    gfxu_cartesian_x, gfxu_cartesian_y, gfxu_cartesian_z,
    gfxu_camera_x, gfxu_camera_y, gfxu_camera_z, gfxu_camera_eye, gfxu_camera_at
)
(
    gfxu_err = 0;

    // Temp matrix for transposition
    gfxu_transposed_mat = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);

    // Static identity 4x4 I matrix for quick access/copying
    gfxu_static_identity_mat = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
    gfxu_make_i(gfxu_static_identity_mat);

    // A temporary matrix for swapping
    gfxu_temp_mat = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
    gfxu_temp_mat2 = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);

    // The model view projection matrix that will be applied to drawing
    gfxu_proj = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
    gfxu_view = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
    gfxu_model = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
    gfxu_mvp = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);

    memcpy(gfxu_proj, gfxu_static_identity_mat, 16);
    memcpy(gfxu_view, gfxu_static_identity_mat, 16);
    memcpy(gfxu_model, gfxu_static_identity_mat, 16);
    memcpy(gfxu_mvp, gfxu_static_identity_mat, 16);

    // Allocate temporary vectors for calculations
    gfxu_t1 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t2 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t3 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t4 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t5 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t6 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t7 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_t8 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);

    // Allocate static x, y, and z vectors for referencing
    gfxu_cartesian_x = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_cartesian_y = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_cartesian_z = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);

    gfxu_vec(1, 0, 0, gfxu_cartesian_x);
    gfxu_vec(0, 1, 0, gfxu_cartesian_y);
    gfxu_vec(0, 0, 1, gfxu_cartesian_z);

    // Global camera orthonormal basis
    gfxu_camera_x = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_camera_y = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_camera_z = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);

    gfxu_camera_eye = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
    gfxu_camera_at = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
);

// Call this before any drawing functions!!!
function gfxu_compute_mvp()
global(gfxu_model, gfxu_view, gfxu_proj, gfxu_temp_mat, gfxu_mvp)
(
    gfxu_mat_mult(gfxu_view, gfxu_model, gfxu_temp_mat);
    gfxu_mat_mult(gfxu_proj, gfxu_temp_mat, gfxu_mvp);
);

/************************************************
//
//  Manipulates the Model matrix.
//
************************************************/

// Applies scalar transform to the model matrix
function gfxu_scale(scalar)
global(gfxu_model, gfxu_temp_mat, gfxu_temp_mat2, gfxu_static_identity_mat)
(
    gfxu_scalar_mat_mult(scalar, gfxu_static_identity_mat, gfxu_temp_mat);
    gfxu_mat_mult(gfxu_temp_mat, gfxu_model, gfxu_temp_mat2);
    memcpy(gfxu_model, gfxu_temp_mat2, gfxu_model[-1]);
);

// Applies rotation transform to the model matrix
function gfxu_rotate(axis, angle)
global(gfxu_model, gfxu_temp_mat, gfxu_temp_mat2)
(
    gfxu_rot_mat_3d(axis, angle, gfxu_temp_mat);
    gfxu_mat_mult(gfxu_temp_mat, gfxu_model, gfxu_temp_mat2);
    memcpy(gfxu_model, gfxu_temp_mat2, gfxu_temp_mat2[-1]);
);

// Applies a translation to the model matrix
function gfxu_translate(vec)
global(gfxu_model, gfxu_temp_mat, gfxu_temp_mat2, gfxu_static_identity_mat)
(
    memcpy(gfxu_temp_mat, gfxu_static_identity_mat, gfxu_temp_mat[-1]);
    gfxu_temp_mat[3] = vec[0];
    gfxu_temp_mat[7] = vec[1];
    gfxu_temp_mat[11] = vec[2];
    gfxu_mat_mult(gfxu_temp_mat, gfxu_model, gfxu_temp_mat2);
    memcpy(gfxu_model, gfxu_temp_mat2, gfxu_temp_mat2[-1]);
);

// Applies an arbitrary transform to the model matrix
function gfxu_transform(mat)
global(gfxu_model, gfxu_temp_mat)
(
    gfxu_mat_mult(mat, gfxu_model, gfxu_temp_mat);
    memcpy(gfxu_model, gfxu_temp_mat, gfxu_model[-1]);
);

/************************************************
//
//  Manipulates the Projection matrix.
//
************************************************/

// Orthographic projection transform.
// Arguments are bounds of the projection.
// You can emulate zoom and translate by increasing/shifting the bounds.
// Stores in projection matrix. Overwrites previous values.
function gfxu_ortho(left, right, bottom, top, near, far)
local(tx, ty, tz)
global(gfxu_proj, mSL_StM_FlClear)
(
    tx = -(right + left) / (right - left);
    ty = -(top + bottom) / (top - bottom);
    tz = -(far + near) / (far - near);

    memset(gfxu_proj, 0, gfxu_proj[-1]);

    gfxu_proj[0] = 2 / (right - left);
    gfxu_proj[5] = 2 / (top - bottom);
    gfxu_proj[10] = -2 / (far - near);
    gfxu_proj[15] = 1;

    gfxu_proj[3] = tx;
    gfxu_proj[7] = ty;
    gfxu_proj[11] = tz;
);

// Perspective transform (assuming symmetric frustrum).
// fovy - vertical field of view, in radians
// aspect - aspect ratio (w/h)
// zNear and zFar - distance to near and far plane of frustrum, will affect clipping.
// Stores in projection matrix. Overwrites previous values.
function gfxu_perspective(fovy, aspect, zNear, zFar)
local(f)
global(gfxu_proj, mSL_StM_FlClear)
(
    memset(gfxu_proj, 0, gfxu_proj[-1]);

    f = 1 / tan(fovy / 2);

    gfxu_proj[0] = f / aspect;
    gfxu_proj[5] = f;
    gfxu_proj[10] = (zFar + zNear) / (zNear - zFar);
    gfxu_proj[11] = 2 * zFar * zNear / (zNear - zFar);
    gfxu_proj[14] = -1;
);

/************************************************
//
//  Manipulates the View matrix.
//
************************************************/

// Calculate a transform for the model view based on where camera is looking.
// Same functionality as gluLookAt from opengl
// All arguments are vectors.
// Stores in view matrix.
function gfxu_look_at(eye, at, up)
local(f, upp, u, s)
global(
    mSL_StM_FlClear,
    gfxu_view,
    gfxu_t1, gfxu_t2, gfxu_t3, gfxu_t4, gfxu_t5, gfxu_t6, #out0
    gfxu_camera_x, gfxu_camera_y, gfxu_camera_z, gfxu_camera_at, gfxu_camera_eye
)
(
    memcpy(gfxu_camera_eye, eye, eye[-1]);
    memcpy(gfxu_camera_at, at, at[-1]);

    gfxu_sub_vec(gfxu_camera_at, gfxu_camera_eye, gfxu_t2);
    gfxu_normalize(gfxu_t2, gfxu_t1);

    f = gfxu_t1;    // just label

    gfxu_normalize(up, gfxu_t2);

    upp = gfxu_t2;    // label

    gfxu_cross(f, upp, gfxu_t3);
    gfxu_normalize(gfxu_t3, gfxu_t4);

    s = gfxu_t4;    // label
    gfxu_normalize(s, gfxu_t5);
    gfxu_cross(gfxu_t5, f, gfxu_t6);

    u = gfxu_t6;    // label

    // copy into global vars first
    memcpy(gfxu_camera_x, s, 3);
    memcpy(gfxu_camera_y, u, 3);
    gfxu_camera_z[0] = -f[0];
    gfxu_camera_z[1] = -f[1];
    gfxu_camera_z[2] = -f[2];

    memset(gfxu_view, 0, gfxu_view[-1]);
    memcpy(gfxu_view + 0, s, 3);
    memcpy(gfxu_view + 4, u, 3);
    memcpy(gfxu_view + 8, gfxu_camera_z, 3);

    gfxu_mat_vec_mult(gfxu_view, eye, gfxu_t1);

    gfxu_view[3] = -gfxu_t1[0];
    gfxu_view[7] = -gfxu_t1[1];
    gfxu_view[11] = -gfxu_t1[2];

    gfxu_view[15] = 1;
);

// Move the camera on arcball.
function gfxu_arcball_rot(dx, dy)
global(gfxu_camera_y, gfxu_camera_x, gfxu_camera_eye, gfxu_camera_at, gfxu_cartesian_y, gfxu_t1, gfxu_t2, gfxu_temp_mat)
(
    (dy) ? (
        gfxu_sub_vec(gfxu_camera_eye, gfxu_camera_at, gfxu_t1);
        gfxu_rot_mat_3d(gfxu_camera_x, dy, gfxu_temp_mat);
        gfxu_mat_vec_mult(gfxu_temp_mat, gfxu_t1, gfxu_t2);
        gfxu_add_vec(gfxu_camera_at, gfxu_t2, gfxu_camera_eye);
    );

    (dx) ? (
        gfxu_sub_vec(gfxu_camera_eye, gfxu_camera_at, gfxu_t1);
        gfxu_rot_mat_3d(gfxu_cartesian_y, dx, gfxu_temp_mat);
        gfxu_mat_vec_mult(gfxu_temp_mat, gfxu_t1, gfxu_t2);
        gfxu_add_vec(gfxu_camera_at, gfxu_t2, gfxu_camera_eye);
    );

    gfxu_look_at(gfxu_camera_eye, gfxu_camera_at, gfxu_cartesian_y);
);

// Move the center of the arcball on xz-plane
function gfxu_arcball_move_xz(dx, dz)
global(gfxu_camera_at, gfxu_camera_eye, gfxu_camera_z, gfxu_cartesian_y, gfxu_camera_y, gfxu_t1, gfxu_t2, gfxu_t3)
(
    gfxu_t1[0] = -gfxu_camera_z[0];
    gfxu_t1[1] = 0;
    gfxu_t1[2] = -gfxu_camera_z[2];
    gfxu_t1[3] = 0;
    gfxu_normalize(gfxu_t1, gfxu_t2);
    gfxu_cross(gfxu_t2, gfxu_cartesian_y, gfxu_t3);

    gfxu_scalar_mat_mult(dz, gfxu_t2, gfxu_t1);
    gfxu_scalar_mat_mult(dx, gfxu_t3, gfxu_t2);
    gfxu_add_vec(gfxu_t1, gfxu_t2, gfxu_t3);

    gfxu_add_vec(gfxu_camera_eye, gfxu_t3, gfxu_t1);
    gfxu_add_vec(gfxu_camera_at, gfxu_t3, gfxu_t2);

    memcpy(gfxu_camera_eye, gfxu_t1, gfxu_camera_eye[-1]);
    memcpy(gfxu_camera_at, gfxu_t2, gfxu_camera_at[-1]);

    gfxu_look_at(gfxu_camera_eye, gfxu_camera_at, gfxu_camera_y);
);

// Move the center of the arcball on xy-plane
function gfxu_arcball_move_xy(dx, dy)
global(gfxu_camera_at, gfxu_camera_eye, gfxu_camera_z, gfxu_cartesian_z, gfxu_camera_y, gfxu_t1, gfxu_t2, gfxu_t3)
(
    gfxu_t1[0] = gfxu_camera_y[0];
    gfxu_t1[1] = gfxu_camera_y[1];
    gfxu_t1[2] = 0;
    gfxu_t1[3] = 0;
    gfxu_normalize(gfxu_t1, gfxu_t2);
    gfxu_cross(gfxu_t2, gfxu_cartesian_z, gfxu_t3);

    gfxu_scalar_mat_mult(dy, gfxu_t2, gfxu_t1);
    gfxu_scalar_mat_mult(dx, gfxu_t3, gfxu_t2);
    gfxu_add_vec(gfxu_t1, gfxu_t2, gfxu_t3);

    gfxu_add_vec(gfxu_camera_eye, gfxu_t3, gfxu_t1);
    gfxu_add_vec(gfxu_camera_at, gfxu_t3, gfxu_t2);

    memcpy(gfxu_camera_eye, gfxu_t1, gfxu_camera_eye[-1]);
    memcpy(gfxu_camera_at, gfxu_t2, gfxu_camera_at[-1]);

    gfxu_look_at(gfxu_camera_eye, gfxu_camera_at, gfxu_camera_y);
);

// Zoom in or out when in perspective. This has no effect in orthographic projection.
// In the case of ortho, re-call the orthographic function with modified bounds.
function gfxu_zoom(zoom)
global(gfxu_camera_y, gfxu_camera_z, gfxu_camera_eye, gfxu_camera_at, gfxu_t1, gfxu_t2, gfxu_t3
    #out0
)
(
    gfxu_sub_vec(gfxu_camera_eye, gfxu_camera_at, gfxu_t1);
    gfxu_print_mat(#out0, gfxu_camera_at);
    gfxu_scalar_mat_mult(zoom, gfxu_t1, gfxu_t2);
    gfxu_add_vec(gfxu_camera_at, gfxu_t2, gfxu_camera_eye);
    gfxu_look_at(gfxu_camera_eye, gfxu_camera_at, gfxu_camera_y);
);

/************************************************
//
//  More utility fns
//
************************************************/

// Converts normalized device coordinates into viewport coordinates.
// Arguments are left and bottom coordinates, and width and height of viewport.
function gfxu_viewport(x, y, width, height)
local(view)
global(gfxu_v_width_2, gfxu_v_height_2, gfxu_v_left, gfxu_v_bottom)
(
    gfxu_v_width_2 = width / 2;
    gfxu_v_height_2 = height / 2;
    gfxu_v_left = x;
    gfxu_v_bottom = y;
);

// Normalize the homogenous coordinates to 2d
function gfxu_to_ndcoord(vec, res)
global(gfxu_mvp, gfxu_v_width_2, gfxu_v_height_2, gfxu_v_left, gfxu_v_bottom)
local(temp)
(
    gfxu_mat_vec_mult(gfxu_mvp, vec, res);
    temp = res[3];
    res[0] = (res[0] / temp + 1) * gfxu_v_width_2 + gfxu_v_left;
    res[1] = (res[1] / temp + 1) * gfxu_v_height_2 + gfxu_v_bottom;
);

/************************************************
//
//  Drawing functions. Remember to call gfxu_compute_mvp()!
//
************************************************/

// Custom line drawing functions that transforms 3d into 2d screen space
// Takes start and end points
function gfxu_draw_line(start, end)
global(gfxu_mvp, gfxu_t1, gfxu_t2, gfxu_err, line_no, #out, #out1, #dbg_desc)
(
    (start[3] !== 1 || end[3] !== 1) ? (
        gfxu_err = 200;
    ) : (
        // sprintf(#out1, "%.3f, %.3f, %.3f, %.3f", start[0], start[1], end[0], end[1]);
        gfxu_to_ndcoord(start, gfxu_t1);
        gfxu_to_ndcoord(end, gfxu_t2);
        gfx_line(
            gfxu_t1[0],
            gfxu_t1[1],
            gfxu_t2[0],
            gfxu_t2[1],
            1.0
        );
    );
);

// Custom triangle drawing functions that transforms 3d into 2d screen space
// Takes 3 points
function gfxu_draw_triangle(p1, p2, p3)
global(gfxu_mvp, gfxu_t1, gfxu_t2, gfxu_t3)
(
    gfxu_to_ndcoord(p1, gfxu_t1);
    gfxu_to_ndcoord(p2, gfxu_t2);
    gfxu_to_ndcoord(p3, gfxu_t3);

    gfx_triangle(
        gfxu_t1[0], gfxu_t1[1],
        gfxu_t2[0], gfxu_t2[1],
        gfxu_t3[0], gfxu_t3[1]
    );
);

// Draws a circle of r screen-units radius at object-space p
function gfxu_draw_circle(p, r)
global(gfxu_mvp, gfxu_t1)
(
    gfxu_to_ndcoord(p, gfxu_t1);
    gfx_circle(gfxu_t1[0], gfxu_t1[1], r, 1.0, 1.0);
);

// Draws a parallelogram given one vertex and side vectors.
function gfxu_draw_parallelogram(start, w_vec, h_vec)
global(gfxu_mvp, gfxu_t1, gfxu_t2, gfxu_t3, gfxu_t4, gfxu_t5, gfxu_t6, gfxu_t7)
(
    gfxu_add_vec(start, w_vec, gfxu_t1);
    gfxu_add_vec(gfxu_t1, h_vec, gfxu_t2);
    gfxu_add_vec(start, h_vec, gfxu_t3);

    gfxu_to_ndcoord(start, gfxu_t4);
    gfxu_to_ndcoord(gfxu_t1, gfxu_t5);
    gfxu_to_ndcoord(gfxu_t2, gfxu_t6);
    gfxu_to_ndcoord(gfxu_t3, gfxu_t7);

    gfx_triangle(
        gfxu_t4[0], gfxu_t4[1],
        gfxu_t5[0], gfxu_t5[1],
        gfxu_t6[0], gfxu_t6[1],
        gfxu_t7[0], gfxu_t7[1]
    );
);
