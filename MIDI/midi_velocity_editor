desc:MIDI Velocity Editor
//tags: MIDI processing
import JackUtilities/mSL_StM_Memory.jsfx-inc
import JackUtilities/mSL_Dyn_Memory.jsfx-inc
import JackUtilities/mSL_Mem_Dbg.jsfx-inc
import GFX/gfx_functions.jsfx-inc

in_pin:none
out_pin:none

slider1:64<0,127,1>Min
slider2:64<0,127,1>Max

@init
gfx_err = 0;
mSL_StM_GlobFlgs=mSL_StM_FlFill+mSL_StM_FlSigErr+mSL_StM_FlCheck;
line_no = 0;
mSL_StM_Init(1024);
static_table = mSL_StM_Alloc(128, 'data', mSL_StM_FlClear);
mem = mSL_StM_BlockStart('XXXX');
chk0 = mSL_StM_Check();
chk1 = mSL_StM_Check(mem);
dyn = mSL_Dyn_Init(mem-2, mem[-1]+4);
chk2 = mSL_StM_Check(mem);
chk3 = mSL_StM_Check();
chk4 = mSL_Dyn_Check(128);

ext_noinit = 1.0;
notes_on = mSL_Dyn_Alloc(88, 'midi', mSL_StM_FlClear);
prev_on = mSL_Dyn_Alloc(88, 'midi', mSL_StM_FlClear);
velocities = mSL_Dyn_Alloc(176, 'midi', mSL_StM_FlClear);
i = 0;
loop(88,
  notes_on[i] = 0;
  prev_on[i] = 0;
);
i = 0;
loop(88,
  velocities[2*i] = -1;
  velocities[2*i+1] = -1;
  i += 1;
);
#out = "";
#out1 = "";
#out0 = "";
last_h = -1;
last_w = -1;

mouse_down = 0;
last_mouse_x = -1;
last_mouse_y = -1;

last_perspective = 1;
perspective = 1;
zoom = 1;

gfx_init();
padding = 100;
model_view_mat = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
rot1 = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
rot2 = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
temp_view = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
temp_view2 = mSL_Dyn_Alloc(16, 'mats', mSL_StM_FlClear);
eye = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
at = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
up = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
make_point(256, 170, 125, eye);
make_point(176, 32, -64, at);
make_vec(0, 1, 0, up);
//make_isometric(model_view_mat);
gfx_look_at(eye, at, up, model_view_mat);
print_mat(#out0, model_view_mat);
//make_isometric(model_view_mat);
//make_mat_rot('y', -$pi/6, temp_view);
//make_mat_rot('x', atan(1/sqrt(2)), another_temp);
//mat_mult(another_temp, temp_view, model_view_mat);


line_start = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
line_end = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
dir1 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
dir2 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
p1 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
p2 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);
p3 = mSL_Dyn_Alloc(4, 'vecs', mSL_StM_FlClear);

@serialize
file_mem(0,notes_on,5*88);

@slider

@block
while (midirecv(offset, msg1, msg2, msg3)) (
  (msg1 === 0x90) ? (
    notes_on[msg2 - 21] = msg3;
    curr_idx = 2 * (msg2 - 21);
    curr_min = velocities[curr_idx];
    velocities[curr_idx] = (
      (velocities[curr_idx] === -1)
      ? msg3
      : min(velocities[curr_idx], msg3)
    );
    velocities[curr_idx + 1] = (
      (velocities[curr_idx + 1] === -1)
      ? msg3
      : max(velocities[curr_idx + 1], msg3)
    );
    slider1 = velocities[114]; sliderchange(slider1);
    slider2 = velocities[115]; sliderchange(slider2);
  );
  (msg1 === 0x80) ? (
    prev_on[msg2 - 21] = notes_on[msg2 - 21];
    notes_on[msg2 - 21] = 0x00; 
  );
  midisend(offset, msg1, msg2, msg3);
  1;
);

@gfx 360 360

(mouse_cap !== 1 && mouse_left_down) ? (
  mouse_left_down = 0;
  last_mouse_x = -1;
  last_mouse_y = -1;
);

(mouse_left_down) ? (
  delta_x = mouse_x - last_mouse_x;
  delta_y = mouse_y - last_mouse_y;
  (delta_y) ? (
    sub_vec(eye, at, t1);
    make_mat_rot(camera_x, -$pi * delta_y / 256, rot1);
    apply_mat(rot1, t1, t2);
    add_vec(at, t2, eye);
  );
  
  (delta_x) ? (
    sub_vec(eye, at, t1);
    make_mat_rot(camera_y, -$pi * delta_x / 256, rot1);
    apply_mat(rot1, t1, t2);
    add_vec(at, t2, eye);
  );
  
  gfx_look_at(eye, at, up, model_view_mat);
  last_mouse_x = mouse_x;
  last_mouse_y = mouse_y;
);

(mouse_wheel !== 0) ? (
  sub_vec(eye, at, t1);
  (mouse_wheel > 0) ? (
    scalar_mat_mult(0.8, t1, t2);
    zoom *= 0.8;
  ) : (
    scalar_mat_mult(1.25, t1, t2);
    zoom *= 1.25;
  );
  add_vec(at, t2, eye);
  gfx_look_at(eye, at, up, model_view_mat);
);

(gfx_getchar() === 'p') ? (
  perspective = !perspective;
);

(
  last_w !== gfx_w ||
  last_h !== gfx_h ||
  gfx_getchar() === 'r' ||
  gfx_getchar() === 'p' ||
  last_mouse_x !== -1 ||
  mouse_wheel !== 0 ||
  last_perspective !== perspective
) ? (
// Recalculate view matrices if window size has changed
  last_w = gfx_w;
  last_h = gfx_h;
  view_w = gfx_w - (2 * padding);
  view_h = gfx_h - (2 * padding);
  aspect = view_w / view_h;
  memcpy(gfx_view_mat, model_view_mat, 16);
//  
  (perspective) ? (
    gfx_perspective($pi / 4, aspect, 1, 100);
  ) : (
    gfx_ortho(-aspect * zoom * 100, aspect * zoom * 100, zoom * -100, zoom *  100, -100, 100);
  );
  print_mat(#out, gfx_view_mat);
  gfx_viewport(padding, gfx_h - padding, view_w, -view_h);
  mouse_wheel = 0;
  last_perspective = perspective;
);

i = 0;
loop(
  88,
  // input bars
  gfx_set(255, 255, 255, 0.2);
  make_point(i * 4, 0, 0, line_start);
  make_vec(3, 0, 0, dir1);
  make_vec(0, 0, -127, dir2);
  draw_parallelogram(line_start, dir1, dir2);
  
  // output bars
  line_start[2] = -127;
  make_vec(0, 127, 0, dir2);
  draw_parallelogram(line_start, dir1, dir2);
  
  // min-max bars
  gfx_set(255, 255, 255, 0.2);
  
  min_vel = velocities[2 * i] === -1 ? 0 : velocities[2 * i];
  max_vel = velocities[2 * i + 1] === -1 ? 127 : velocities[2 * i + 1];
  make_point(i * 4, 0, -min_vel, line_start);
  make_vec(3, 0, 0, dir1);
  make_vec(0, 0, -(max_vel - min_vel), dir2);
  draw_parallelogram(line_start, dir1, dir2);
  
  // current note bar
  gfx_set(255, 255, 255, 0.75);
  make_point(i * 4, 0, -notes_on[i], line_start);
  dup_vec(line_start, line_end);
  line_end[0] = line_end[0] + 3;
  draw_line(line_start, line_end);
  
  line_start[0] = line_start[0] + 2;
  make_vec(0, notes_on[i], 0, dir1);
  add_vec(line_start, dir1, line_end);
  draw_line(line_start, line_end);
  
  make_point(i * 4, notes_on[i], -127, line_start);
  dup_vec(line_start, line_end);
  line_end[0] = line_end[0] + 3;
  draw_line(line_start, line_end); 
  
  (notes_on[i] !== 0) ? (
    line_start[0] = line_start[0] + 2;
    dup_vec(line_start, line_end);
    line_end[2] = -notes_on[i];
    draw_line(line_start, line_end);
    make_point(i * 4 + 2, notes_on[i], -notes_on[i], p1);
    draw_circle(p1, 2);
  );
  
  (notes_on[i] === 0 && prev_on[i] !== 0) ? (
    gfx_set(255, 255, 255, 0.4);
    make_point(i * 4, 0, -prev_on[i], line_start);
    dup_vec(line_start, line_end);
    line_end[0] = line_end[0] + 3;
    draw_line(line_start, line_end);
    
    make_point(i * 4, prev_on[i], -127, line_start);
    dup_vec(line_start, line_end);
    line_end[0] = line_end[0] + 3;
    draw_line(line_start, line_end); 
  );
  
  // vel curve
  gfx_set(255, 255, 255, 0.2);
  
  make_point(i * 4 + 2, 0, 0, line_start);
  make_point(i * 4 + 2, 127, -127, line_end);
  draw_line(line_start, line_end);
  
  
  i += 1;
);


(mouse_cap === 1 && !mouse_left_down) ? (
  mouse_left_down = 1;
  last_mouse_x = mouse_x;
  last_mouse_y = mouse_y;
);

/*
gfx_x = padding;
gfx_y = gfx_h - padding;
gfx_set(255, 255, 255, 0.2);

gfx_lineto(gfx_w - padding, gfx_y);

i = 0;
bar_width_with_margin = (gfx_w - (2 * padding)) / 87.75;
bar_width = 0.75 * bar_width_with_margin;

bar_max_height = (gfx_h - (2 * padding));
bar_height_per_velocity = bar_max_height / 127;
begin_y = gfx_h - padding;
loop(
  88,
  // draw max bars
  gfx_set(255, 255, 255, 0.2);
  begin_x = i * bar_width_with_margin + padding;
  end_x = begin_x + bar_width;
  gfx_rect(begin_x, begin_y - bar_max_height, bar_width, bar_max_height);
  
  
  
  // draw min-max
  gfx_set(255, 255, 255, 0.5);
  min_vel = velocities[2 * i] === -1 ? 0 : velocities[2 * i];
  max_vel = velocities[2 * i + 1] === -1 ? 127 : velocities[2 * i + 1];
  bar_min = bar_height_per_velocity * min_vel;
  bar_max = bar_height_per_velocity * max_vel;
  gfx_rect(begin_x, begin_y - bar_max, bar_width, bar_max - bar_min);
  
  // draw current velocity
  bar_height = (bar_height_per_velocity * notes_on[i]);
  end_y = begin_y - bar_height;
  gfx_set(255, 255, 255, 0.8);
  gfx_rect(begin_x, end_y, bar_width, bar_height);
  
  // draw current velocity
  gfx_set(255, 255, 255);
  gfx_line(begin_x, end_y, end_x, end_y);
  
  // draw last velocity if current note is off and last velocity was not 0
  (notes_on[i] === 0 && prev_on[i] !== 0) ? (
    gfx_set(255, 255, 255, 0.4);
    bar_height = (bar_height_per_velocity * prev_on[i]);
    end_y = begin_y - bar_height;
    gfx_line(begin_x, end_y, end_x, end_y);
  );
  i += 1;
);
*/
